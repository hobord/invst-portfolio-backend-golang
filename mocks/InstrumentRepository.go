// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/hobord/invst-portfolio-backend-golang/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// InstrumentRepository is an autogenerated mock type for the InstrumentRepository type
type InstrumentRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *InstrumentRepository) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *InstrumentRepository) GetByID(ctx context.Context, id int) (*entity.Instrument, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Instrument
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.Instrument); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Instrument)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, keyword, offset, limit
func (_m *InstrumentRepository) List(ctx context.Context, keyword string, offset int, limit int) ([]*entity.Instrument, error) {
	ret := _m.Called(ctx, keyword, offset, limit)

	var r0 []*entity.Instrument
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*entity.Instrument); ok {
		r0 = rf(ctx, keyword, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Instrument)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, keyword, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, _a1
func (_m *InstrumentRepository) Save(ctx context.Context, _a1 *entity.Instrument) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Instrument) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TotalCountOfList provides a mock function with given fields: ctx, keyword
func (_m *InstrumentRepository) TotalCountOfList(ctx context.Context, keyword string) (int, error) {
	ret := _m.Called(ctx, keyword)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, keyword)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, keyword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
